// ransomNote

public class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
      if(ransomNote.length()==0) return true;
      
      
        int [] alphbet=new int[26];
     for(int i=0;i<magazine.length();i++){
         alphbet[magazine.charAt(i)-'a']++;
     }

    for(int i=0;i<ransomNote.length();i++){
       int temp= --alphbet[ransomNote.charAt(i)-'a'];
        if(temp<0) return false;
        
    }
    
    return true;
}


}

// valid anagram
public class Solution {
    public boolean isAnagram(String s, String t) {
       if(s.length()==0&&t.length()==0) return true;
      
      
        int [] alphbet=new int[26];
     for(int i=0;i<s.length();i++){
         alphbet[s.charAt(i)-'a']++;
     }

    for(int i=0;i<t.length();i++){
       --alphbet[t.charAt(i)-'a'];
        
        
    }
    
    for(int i=0;i<26;i++){
        if(alphbet[i]!=0)
        return false;
    }
    
    return true;
}
        
}
// Find unique character in a String
public class Solution {
    public int firstUniqChar(String s) {
       int [] alphbet=new int [26];
        
        for(int i=0;i<s.length();i++){
            
            alphbet[s.charAt(i)-'a']++;
        }
        
        int index=s.length();
        for(int i=0;i<26;i++){
            if(alphbet[i]==1){
                char word=(char)(i+'a');
                int temp=s.indexOf(word);
                if(temp<index){
                    index=temp;
                }
            }
        }
        
        return index==s.length()?-1:index;
    }
}

//Major Element I
public class Solution {
    public int majorityElement(int[] nums) {
           HashMap<Integer, Integer> hm=new HashMap <Integer,Integer> ();
           for(int i=0;i<nums.length;i++){
              if(hm.containsKey(nums[i]))
              {Integer value=hm.get(nums[i]);
              hm.put(nums[i],++value);}
              else{hm.put(nums[i],1);}
           }
           
          Iterator<Integer> keySetIterator = hm.keySet().iterator();

     while(keySetIterator.hasNext()){
  Integer key = keySetIterator.next();
 if(hm.get(key)>nums.length/2)
 return key;
}

return 0;

}
}

//containduplicate
public class Solution {
    public boolean containsDuplicate(int[] nums) {
       Set <Integer> hs = new HashSet<Integer>();
         for(int num : nums) {
             if(hs.contains(num)) return true;
             hs.add(num);
         }
        return false;
    }

//intersectionof two array II
public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {

   
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        ArrayList <Integer> al = new ArrayList <Integer>();
        int one=0;
        int two=0;
        while(two<nums2.length&&one<nums1.length)
        if(nums1[one]>nums2[two]){     //if..else..if
            two++;
        }
        else {if(nums1[one]<nums2[two]){
            one++;
        }
        
         else{
            al.add(nums1[one]);
            two++;
            one++;
          
        }
        }
          int[] intersect_arr = new int[al.size()];
        for(int i=0;i<al.size();i++){
            intersect_arr[i] = al.get(i).intValue();
        }
        return intersect_arr;
        }
}
