// we cannot use mid * mid > x, because it will encounter overflow problem.
public class Solution {
    public int mySqrt(int x) {
        int start = 1;
        int end = x;
        while (start + 1 < end) {
            int mid = (end - start) / 2 + start;
            if (mid < x / mid) {
                start = mid;
            } else if (mid == x / mid) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (start * start == x) {
            return start;
        }
        if (end * end == x) {
            return end;
        }
        return Math.min(start * start - x, end * end - x) == start * start - x ? start : end;
        
    }
}
